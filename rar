#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# rar.py

import rarfile
import zipfile
import os
import sys
import re
import shutil
from multiprocessing.dummy import Pool


def un_rar(file_name, pwd=None):
    try:
        # if file_name.split('.')[-1] == 'rar':
        if rarfile.is_rarfile(file_name):
            rar = rarfile.RarFile(file_name)
            rar.extractall(path=file_name.split('.')[0], pwd=pwd)
        # elif file_name.split('.')[-1] == 'zip':
        elif zipfile.is_zipfile(file_name):
            zip = zipfile.ZipFile(file_name)
            # for zip_file in zip.namelist():
            #     try:
            #         print(zip.filelist)
            #         zip_file = zip_file.encode('cp437').decode('utf-8')
            #         print(zip_file)
            #         print(zip.namelist())
            #
            #     except Exception as e:
            #         print(e)
            #         print('7')
            #         try:
            #             zip_file = zip_file.encode('utf-8').decode('utf-8')
            #         except Exception as i:
            #             print(i)
            zip.extractall(path=file_name.split('.')[0], pwd=pwd)
    except Exception as e:
        print(e)
        print('Failï¼š' + file_name)
    else:
        print('Success')


def point_file_name(path):
    return [os.path.join(item[0], file_name)
            for item in os.walk(path)
            for file_name in item[-1]
            if re.search(r'.rar$|.zip$', file_name)]


if __name__ == '__main__':
    path = sys.argv[1]
    pwd = ''
    if len(sys.argv) > 2:
        if sys.argv[2] != "rm":
            pwd = sys.argv[2].encode('gbk')
        elif sys.argv[2] == "rm":
            if len(sys.argv) == 4:
                pwd = sys.argv[3].encode('gbk')
    # with open(r'UnRAR.exe','rb') as f:
    #     with open(os.path.join(path,'UnRAR.exe'),'wb') as other:
    #         other.write(f.read())
    file_names = point_file_name(path)
    pool = Pool()
    pool.starmap(un_rar, zip(file_names, [pwd] * len(file_names)))
    # for file_name in file_names:
    #    pool.apply_async(un_rar, args=(file_name, pwd))
    pool.close()
    pool.join()
    if len(sys.argv) > 2:
        if sys.argv[2] == "rm":
            for file_name in file_names:
                os.remove(file_name)
